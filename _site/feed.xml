<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jason_milfred(design, develop)</title>
    <description></description>
    <link>http://milfred.github.io/</link>
    <atom:link href="http://milfred.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 11 Apr 2016 18:46:10 -0500</pubDate>
    <lastBuildDate>Mon, 11 Apr 2016 18:46:10 -0500</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Ruby: Regular Expressions and MatchData Basics</title>
        <description>&lt;p&gt;I’ve used regular expressions before in SQL and Google Analytics, but there’s something intimidating about the way they look in Ruby sometimes that has stopped me from delving into them so far. For instance =&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(s =~ /&amp;lt;0(x|X)(\d|[a-f]|[A-F])+&amp;gt;/)&lt;/code&gt;. What kind of insanity is that? It honestly looks like someone just mashed the keyboard. Yet, I know how helpful understanding regular expressions can be, so I decided I had to do some research and get to know them better.&lt;/p&gt;

&lt;p&gt;Let’s start off with some basics. A regular expression is used for pattern matching. With them you can test a string to see if it contains a pattern, you can extract characters from a string, and you can change a string.&lt;/p&gt;

&lt;p&gt;Take this string, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ahh, a bear in his natural habitat...a Studebaker.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To check if the word “Studebaker” is in the string, we could do it like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Studebaker/&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 39&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wait. Why does it return “39?” The =~ operator returns the number that the match starts on. If we want, we can create a MatchData object by calling the match method and storing the results to a variable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;match_studebaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Studebaker/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;lt;MatchData &quot;Studebaker&quot;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can call to_s on match_studebaker.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;match_studebaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Studebaker&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we might not know if the word is capitalized or not we could try something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/studebaker/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;lt;MatchData &quot;studebaker&quot;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And it works. However, the string in the MatchData object now has a lowercase “s.” We could alter our regular expression a bit to accomplish the same thing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/[sS]tudebaker/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &amp;lt;MatchData &quot;Studebaker&quot;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this method we have the added benefit of not altering the original case of the matched pattern as well. There are a number of other useful methods in the MatchData class. If you’d like to learn more, you can &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/MatchData.html&quot;&gt;view them here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Apr 2016 00:00:00 -0500</pubDate>
        <link>http://milfred.github.io/ruby/2016/04/04/ruby-regular-expressions.html</link>
        <guid isPermaLink="true">http://milfred.github.io/ruby/2016/04/04/ruby-regular-expressions.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>JavaScript Objects Compared to Hashes in Ruby</title>
        <description>&lt;p&gt;My programming education started with Ruby and then jumped over to JavaScript a couple of weeks later. Initially it was very frustrating to make the switch. How many times will I forget to type “var” or a semi-colon before it becomes automatic? At least some things are the same. JavaScript has arrays, so no problem there. But what about hashes? Why does it seem like everything in JavaScript is either a variable or a function anyway? It’s kind of confusing. Well, I can help address the hash question at least.&lt;/p&gt;

&lt;p&gt;So the good thing about learning more than one programming language is that it forces you to start thinking in terms of concepts and logic, rather than specific language syntax. While JavaScript doesn’t have something called a hash like Ruby, they both have associative arrays. That is, a way to store data in key/value pairs.&lt;/p&gt;

&lt;p&gt;In Ruby, you create a hash like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;assoc_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;key: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty simple. You give it a name and set it equal to the values inside the curly braces. A key can be any object type (including a hash), but for the most part you’ll use a symbol, an integer, a variable, or a string. In the example above, I’ve used a symbol. In this case you use a colon to separate the key and the array. If you use a different object type as your key you’ll need to use the “hash rocket” as a separator. It looks like this: “=&amp;gt;”&lt;/p&gt;

&lt;p&gt;To create an associative array in JavaScript your code will look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assocArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not all that different is it? In JavaScript, this data structure is called an “Object” and instead of a key, it’s called a “property.”&lt;/p&gt;

&lt;p&gt;While they look almost exatly the same, there are some differences. The key I used in the Ruby example is a symbol. I’m not going to get too deep into symbols right now, but you use them for a value that won’t change in your program. In fact, you technically can’t change them. The key I used in the JavaScript example looks the same, but is in fact a string. JavaScript does have a symbol data type now, but using them as properties isn’t typically done. This mostly comes into play when you try to call the value of a property in JavaScript.&lt;/p&gt;

&lt;p&gt;If you call the value of a pair that uses a symbol for the key in Ruby, it looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hash_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In JavaScript it would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;objectName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://milfred.github.io/ruby/javascript/2016/03/29/javascript-objects-vs-ruby-hashes.html</link>
        <guid isPermaLink="true">http://milfred.github.io/ruby/javascript/2016/03/29/javascript-objects-vs-ruby-hashes.html</guid>
        
        
        <category>ruby</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Ruby: Using Instance Variables</title>
        <description>&lt;p&gt;It can sometimes be confusing to know when to use an instance method or variable. Below I’ve created an example of a class that models a guitar and strumming each string. It takes two arguments. The first argument is the number of the string (starting from the top) you want to strum. The second is how many total strings you want to strum. The output would will be the notes that the guitar would play given the arguments.&lt;/p&gt;

&lt;p&gt;We’ll figure out when we need to use instance methods and variables in this example. Look it over and try to figure out if all of the methods really need to be instance methods.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Guitar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_of_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@string_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_num&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@num_of_strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_of_strings&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;G&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@string_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@num_of_strings&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is a basic 6-string. You may have a fancy 12-string at home, but that&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;s too many strings for this guitar.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@string_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@num_of_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What do you think? The answer is yes. They all need to be instance methods because we need to share the data that is stored in them with other methods.&lt;/p&gt;

&lt;p&gt;Now let’s add another feature to our guitar. A method to retune it. Take a look and see if it looks correct.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Guitar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_of_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@string_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_num&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@num_of_strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_of_strings&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;G&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@string_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@num_of_strings&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is a basic 6-string. You may have a fancy 12-string at home, but that&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;s too many strings for this guitar.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@string_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@num_of_strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_tuning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@new_tune&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@new_tune&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You have tuned the guitar to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code will run perfectly, but there is one variable that doesn’t need to be an instance variable. The “@new_tune” variable isn’t being used outside of the new_tuning method, so it doesn’t need to be an instance method. We could just leave it, but let’s say we keep expanding our Guitar class and adding new methods. Maybe I add a feature to create a new song some day and I decide to create an instance variable called “@new_tune.” That could cause some bugs in my program.This code will run perfectly, but there is one variable that doesn’t need to be an instance variable. The “@new_tune” variabe isn’t being used outside of the new_tuning method, so it doesn’t need to be an instance method. We could just leave it, but let’s say we keep expanding our Guitar class and adding new methods. Maybe I add a feature to create a new song some day and I decide to create an instance variable called “@new_tune.” That could cause some bugs in my program.&lt;/p&gt;

&lt;p&gt;Here is what the new method should look like to prevent issues like that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_tuning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_tune&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_tune&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You have tuned the guitar to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://milfred.github.io/ruby/2016/03/21/ruby-instance-variables.html</link>
        <guid isPermaLink="true">http://milfred.github.io/ruby/2016/03/21/ruby-instance-variables.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>The Differences Between Arrays and Hashes in Ruby</title>
        <description>&lt;p&gt;In Ruby, an array and a hash are similar in the sense that they are both containers for a group of objects that act like variables. In an array, each object in the array is indexed with an integer starting with zero. A hash, on the other hand, uses a key/value pair to access the index. The key can be any type of object (string, integer, etc.).&lt;/p&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;Values in an array are comma separated and wrapped in brackets.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;spinal_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;David St. Hubbins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Nigel Tufnel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Derek Smalls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So “David St. Hubbins” could be accessed by calling:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;spinal_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;David St. Hubbins&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;hashes&quot;&gt;Hashes&lt;/h2&gt;

&lt;p&gt;Key/value pairs in a hash can be separated with two different syntaxes. &lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; (referred to as ‘hash rocket’), or &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;. If you use a colon, the key will be a &lt;code class=&quot;highlighter-rouge&quot;&gt;symbol&lt;/code&gt;. For more information about symbols and how they differ from strings, &lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Symbol.html&quot;&gt;look here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;spinal_tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;david: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;David St. Hubbins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;role: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lead singer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rhythm guitar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;nigel: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nigel Tufnel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;role: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lead_guitar&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;derek: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Derek Smalls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;role: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bass&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Values can be accessed by calling the key assigned to it. The example above is a multi-dimensional hash or, as I once heard it referred to, a “hashy hash.” Here, “David St. Hubbins” can be accessed by calling:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;spinal_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:david&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;David St. Hubbins&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we want to see what David’s role is in the band we can say:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spinal_tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:david&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# lead singer&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# rhythm guitar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 06 Mar 2016 00:00:00 -0600</pubDate>
        <link>http://milfred.github.io/ruby/2016/03/06/ruby-arrays-and-hashes.html</link>
        <guid isPermaLink="true">http://milfred.github.io/ruby/2016/03/06/ruby-arrays-and-hashes.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>CSS Display Property: Using Inline vs. Inline-Block</title>
        <description>&lt;section&gt;
  &lt;h2&gt;Inline and Block&lt;/h2&gt;
  &lt;p&gt;Inline and inline-block are values you can apply to an HTML element using the CSS display property. To understand the difference between the two you will need to first have a basic understanding of The inline and block values. Inline and block are the standard values for essentailly all HTML elements.&lt;/p&gt;
  &lt;p&gt;A block-level element is typically a container element. Some examples of block level elements are: &lt;strong&gt;div&lt;/strong&gt;, &lt;strong&gt;section&lt;/strong&gt;, &lt;strong&gt;main&lt;/strong&gt;, and &lt;strong&gt;p&lt;/strong&gt;. Block-level elements occupy the entire space of their parent elements by default and span the entire width of the page. Elements before and after a block-level element will sit above and below it in the page layout.&lt;/p&gt;

  &lt;p&gt;I&#39;m a &quot;p&quot; (or paragraph) element. I&#39;m a block-level element.&lt;/p&gt;

  &lt;section&gt;&lt;p&gt;And I&#39;m a &quot;section&quot; element. I&#39;m a block-level element too. We can&#39;t sit next to each other. The teacher thinks we&#39;re a bad influence on each other.&lt;/p&gt;&lt;/section&gt;

  &lt;p&gt;An inline-level element only occupies the space of the content inside of it and it flows &quot;inline&quot; with text content. Some examples of inline elements are: &lt;strong&gt;strong&lt;/strong&gt;, &lt;strong&gt;span&lt;/strong&gt;, and &lt;strong&gt;a&lt;/strong&gt;. You can&#39;t speficy a height and width in CSS for inline-level elments.&lt;/p&gt;

  &lt;span&gt;I&#39;m a &quot;span&quot; element. I&#39;m inline.&lt;/span&gt;
  &lt;a href=&quot;#&quot; alt=&quot;Some Alt Text&quot;&gt;I&#39;m an &quot;a&quot; (or anchor) element. I&#39;m inline too and well behaved enough to sit next to my buddy span.&lt;/a&gt;

  &lt;h2&gt;Inline-Block&lt;/h2&gt;
  &lt;p&gt;Inline-block is basically a combination of inline and block. They are basically block-level elements, but you can specify a height and width in CSS for an element displayed with inline-block. They will also allow other elements to sit to the right and left without pushing them to the next row up or down.&lt;/p&gt;

  &lt;div class=&quot;inline-block&quot;&gt;I&#39;m a paragraph elment who&#39;s been set to display inline-block.&lt;/div&gt;
  &lt;div class=&quot;inline-block&quot;&gt;I&#39;m another paragraph set to inline-block. Stop touching me!&lt;/div&gt;
&lt;/section&gt;</description>
        <pubDate>Mon, 29 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://milfred.github.io/css/2016/02/29/css-inline-vs-inline-block.html</link>
        <guid isPermaLink="true">http://milfred.github.io/css/2016/02/29/css-inline-vs-inline-block.html</guid>
        
        
        <category>css</category>
        
      </item>
    
  </channel>
</rss>
